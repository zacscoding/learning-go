// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/person_service.proto

package higrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// person save request
type PersonRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersonRequest) Reset()         { *m = PersonRequest{} }
func (m *PersonRequest) String() string { return proto.CompactTextString(m) }
func (*PersonRequest) ProtoMessage()    {}
func (*PersonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d746d31f1c5e21a, []int{0}
}

func (m *PersonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonRequest.Unmarshal(m, b)
}
func (m *PersonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonRequest.Marshal(b, m, deterministic)
}
func (m *PersonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonRequest.Merge(m, src)
}
func (m *PersonRequest) XXX_Size() int {
	return xxx_messageInfo_PersonRequest.Size(m)
}
func (m *PersonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PersonRequest proto.InternalMessageInfo

func (m *PersonRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersonRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

// person save response
type PersonSaveSummary struct {
	Trial                int32    `protobuf:"varint,1,opt,name=trial,proto3" json:"trial,omitempty"`
	Success              int32    `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Fail                 int32    `protobuf:"varint,3,opt,name=fail,proto3" json:"fail,omitempty"`
	Elapsed              int64    `protobuf:"varint,4,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersonSaveSummary) Reset()         { *m = PersonSaveSummary{} }
func (m *PersonSaveSummary) String() string { return proto.CompactTextString(m) }
func (*PersonSaveSummary) ProtoMessage()    {}
func (*PersonSaveSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d746d31f1c5e21a, []int{1}
}

func (m *PersonSaveSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonSaveSummary.Unmarshal(m, b)
}
func (m *PersonSaveSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonSaveSummary.Marshal(b, m, deterministic)
}
func (m *PersonSaveSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonSaveSummary.Merge(m, src)
}
func (m *PersonSaveSummary) XXX_Size() int {
	return xxx_messageInfo_PersonSaveSummary.Size(m)
}
func (m *PersonSaveSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonSaveSummary.DiscardUnknown(m)
}

var xxx_messageInfo_PersonSaveSummary proto.InternalMessageInfo

func (m *PersonSaveSummary) GetTrial() int32 {
	if m != nil {
		return m.Trial
	}
	return 0
}

func (m *PersonSaveSummary) GetSuccess() int32 {
	if m != nil {
		return m.Success
	}
	return 0
}

func (m *PersonSaveSummary) GetFail() int32 {
	if m != nil {
		return m.Fail
	}
	return 0
}

func (m *PersonSaveSummary) GetElapsed() int64 {
	if m != nil {
		return m.Elapsed
	}
	return 0
}

// person query request
type PersonQuery struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersonQuery) Reset()         { *m = PersonQuery{} }
func (m *PersonQuery) String() string { return proto.CompactTextString(m) }
func (*PersonQuery) ProtoMessage()    {}
func (*PersonQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d746d31f1c5e21a, []int{2}
}

func (m *PersonQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonQuery.Unmarshal(m, b)
}
func (m *PersonQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonQuery.Marshal(b, m, deterministic)
}
func (m *PersonQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonQuery.Merge(m, src)
}
func (m *PersonQuery) XXX_Size() int {
	return xxx_messageInfo_PersonQuery.Size(m)
}
func (m *PersonQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonQuery.DiscardUnknown(m)
}

var xxx_messageInfo_PersonQuery proto.InternalMessageInfo

func (m *PersonQuery) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PersonQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// person query response
type PersonResponse struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersonResponse) Reset()         { *m = PersonResponse{} }
func (m *PersonResponse) String() string { return proto.CompactTextString(m) }
func (*PersonResponse) ProtoMessage()    {}
func (*PersonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d746d31f1c5e21a, []int{3}
}

func (m *PersonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonResponse.Unmarshal(m, b)
}
func (m *PersonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonResponse.Marshal(b, m, deterministic)
}
func (m *PersonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonResponse.Merge(m, src)
}
func (m *PersonResponse) XXX_Size() int {
	return xxx_messageInfo_PersonResponse.Size(m)
}
func (m *PersonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PersonResponse proto.InternalMessageInfo

func (m *PersonResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PersonResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersonResponse) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func init() {
	proto.RegisterType((*PersonRequest)(nil), "PersonRequest")
	proto.RegisterType((*PersonSaveSummary)(nil), "PersonSaveSummary")
	proto.RegisterType((*PersonQuery)(nil), "PersonQuery")
	proto.RegisterType((*PersonResponse)(nil), "PersonResponse")
}

func init() {
	proto.RegisterFile("proto/person_service.proto", fileDescriptor_7d746d31f1c5e21a)
}

var fileDescriptor_7d746d31f1c5e21a = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x3f, 0x4f, 0xfb, 0x30,
	0x14, 0xac, 0x93, 0xf6, 0xf7, 0x53, 0x1f, 0x6d, 0x00, 0x8b, 0x21, 0xca, 0x14, 0x79, 0xca, 0x80,
	0xd2, 0xf2, 0x6f, 0x62, 0x03, 0x09, 0x16, 0x06, 0x70, 0x37, 0x16, 0x64, 0x92, 0x47, 0x6b, 0x29,
	0xff, 0x6a, 0x3b, 0x95, 0xfa, 0x4d, 0xf9, 0x38, 0x28, 0x4e, 0x13, 0xa8, 0x18, 0xe8, 0xf6, 0xee,
	0xf4, 0x2e, 0x77, 0xf7, 0x62, 0x08, 0x2a, 0x55, 0x9a, 0x72, 0x56, 0xa1, 0xd2, 0x65, 0xf1, 0xa6,
	0x51, 0x6d, 0x64, 0x82, 0xb1, 0x25, 0xd9, 0x0d, 0x4c, 0x9f, 0x2d, 0xcf, 0x71, 0x5d, 0xa3, 0x36,
	0x94, 0xc2, 0xb0, 0x10, 0x39, 0xfa, 0x24, 0x24, 0xd1, 0x98, 0xdb, 0x99, 0x9e, 0x80, 0x2b, 0x96,
	0xe8, 0x3b, 0x21, 0x89, 0x46, 0xbc, 0x19, 0xd9, 0x1a, 0x4e, 0x5b, 0xd9, 0x42, 0x6c, 0x70, 0x51,
	0xe7, 0xb9, 0x50, 0x5b, 0x7a, 0x06, 0x23, 0xa3, 0xa4, 0xc8, 0xac, 0x76, 0xc4, 0x5b, 0x40, 0x7d,
	0xf8, 0xaf, 0xeb, 0x24, 0x41, 0xad, 0x77, 0x1f, 0xe8, 0x60, 0x63, 0xf5, 0x21, 0x64, 0xe6, 0xbb,
	0x96, 0xb6, 0x73, 0xb3, 0x8d, 0x99, 0xa8, 0x34, 0xa6, 0xfe, 0x30, 0x24, 0x91, 0xcb, 0x3b, 0xc8,
	0x2e, 0xe0, 0xa8, 0xb5, 0x7c, 0xa9, 0x51, 0x6d, 0xa9, 0x07, 0x8e, 0x4c, 0xad, 0x93, 0xcb, 0x1d,
	0x99, 0xf6, 0xb9, 0x9d, 0xef, 0xdc, 0xec, 0x01, 0xbc, 0xae, 0x9c, 0xae, 0xca, 0x42, 0xe3, 0x21,
	0xaa, 0xae, 0xad, 0xdb, 0xb7, 0xbd, 0xfc, 0x24, 0x9d, 0x37, 0x2f, 0x6b, 0x83, 0xf4, 0x1c, 0xc6,
	0x8f, 0x68, 0x5a, 0x86, 0x4e, 0xe2, 0x1f, 0xb1, 0x82, 0xe3, 0x78, 0xdf, 0x91, 0x0d, 0xe8, 0x0c,
	0xe0, 0x49, 0xea, 0x43, 0xd7, 0xe7, 0x84, 0x5e, 0x03, 0x34, 0x67, 0xdd, 0x09, 0xbc, 0x78, 0xef,
	0x07, 0x05, 0x34, 0xfe, 0x75, 0x79, 0x36, 0x88, 0x1a, 0xd5, 0xb4, 0x0f, 0x75, 0xbf, 0x12, 0xe6,
	0x4f, 0xa7, 0x88, 0xcc, 0xc9, 0x9d, 0xf7, 0x3a, 0xb1, 0x0f, 0xe1, 0x76, 0x25, 0x97, 0xaa, 0x4a,
	0xde, 0xff, 0x59, 0x74, 0xf5, 0x15, 0x00, 0x00, 0xff, 0xff, 0x04, 0x81, 0x0f, 0x5e, 0x34, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PersonRouteClient is the client API for PersonRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersonRouteClient interface {
	// simple rpc
	// Obtains a person at a given id
	GetPerson(ctx context.Context, in *PersonQuery, opts ...grpc.CallOption) (*PersonResponse, error)
	// server-to-client streaming RPC
	// Obtains persons within the given name
	ListPerson(ctx context.Context, in *PersonQuery, opts ...grpc.CallOption) (PersonRoute_ListPersonClient, error)
	// client-to-server streaming RPC
	// Save persons and return a PersonSaveSummary
	SavePerson(ctx context.Context, opts ...grpc.CallOption) (PersonRoute_SavePersonClient, error)
	// bidirectional streaming RPC
	GetPersonChat(ctx context.Context, opts ...grpc.CallOption) (PersonRoute_GetPersonChatClient, error)
}

type personRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonRouteClient(cc grpc.ClientConnInterface) PersonRouteClient {
	return &personRouteClient{cc}
}

func (c *personRouteClient) GetPerson(ctx context.Context, in *PersonQuery, opts ...grpc.CallOption) (*PersonResponse, error) {
	out := new(PersonResponse)
	err := c.cc.Invoke(ctx, "/PersonRoute/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRouteClient) ListPerson(ctx context.Context, in *PersonQuery, opts ...grpc.CallOption) (PersonRoute_ListPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonRoute_serviceDesc.Streams[0], "/PersonRoute/ListPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personRouteListPersonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonRoute_ListPersonClient interface {
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personRouteListPersonClient struct {
	grpc.ClientStream
}

func (x *personRouteListPersonClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personRouteClient) SavePerson(ctx context.Context, opts ...grpc.CallOption) (PersonRoute_SavePersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonRoute_serviceDesc.Streams[1], "/PersonRoute/SavePerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &personRouteSavePersonClient{stream}
	return x, nil
}

type PersonRoute_SavePersonClient interface {
	Send(*PersonRequest) error
	CloseAndRecv() (*PersonSaveSummary, error)
	grpc.ClientStream
}

type personRouteSavePersonClient struct {
	grpc.ClientStream
}

func (x *personRouteSavePersonClient) Send(m *PersonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personRouteSavePersonClient) CloseAndRecv() (*PersonSaveSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PersonSaveSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personRouteClient) GetPersonChat(ctx context.Context, opts ...grpc.CallOption) (PersonRoute_GetPersonChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonRoute_serviceDesc.Streams[2], "/PersonRoute/GetPersonChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &personRouteGetPersonChatClient{stream}
	return x, nil
}

type PersonRoute_GetPersonChatClient interface {
	Send(*PersonQuery) error
	Recv() (*PersonResponse, error)
	grpc.ClientStream
}

type personRouteGetPersonChatClient struct {
	grpc.ClientStream
}

func (x *personRouteGetPersonChatClient) Send(m *PersonQuery) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personRouteGetPersonChatClient) Recv() (*PersonResponse, error) {
	m := new(PersonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonRouteServer is the server API for PersonRoute service.
type PersonRouteServer interface {
	// simple rpc
	// Obtains a person at a given id
	GetPerson(context.Context, *PersonQuery) (*PersonResponse, error)
	// server-to-client streaming RPC
	// Obtains persons within the given name
	ListPerson(*PersonQuery, PersonRoute_ListPersonServer) error
	// client-to-server streaming RPC
	// Save persons and return a PersonSaveSummary
	SavePerson(PersonRoute_SavePersonServer) error
	// bidirectional streaming RPC
	GetPersonChat(PersonRoute_GetPersonChatServer) error
}

// UnimplementedPersonRouteServer can be embedded to have forward compatible implementations.
type UnimplementedPersonRouteServer struct {
}

func (*UnimplementedPersonRouteServer) GetPerson(ctx context.Context, req *PersonQuery) (*PersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (*UnimplementedPersonRouteServer) ListPerson(req *PersonQuery, srv PersonRoute_ListPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPerson not implemented")
}
func (*UnimplementedPersonRouteServer) SavePerson(srv PersonRoute_SavePersonServer) error {
	return status.Errorf(codes.Unimplemented, "method SavePerson not implemented")
}
func (*UnimplementedPersonRouteServer) GetPersonChat(srv PersonRoute_GetPersonChatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonChat not implemented")
}

func RegisterPersonRouteServer(s *grpc.Server, srv PersonRouteServer) {
	s.RegisterService(&_PersonRoute_serviceDesc, srv)
}

func _PersonRoute_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRouteServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PersonRoute/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRouteServer).GetPerson(ctx, req.(*PersonQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRoute_ListPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PersonQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonRouteServer).ListPerson(m, &personRouteListPersonServer{stream})
}

type PersonRoute_ListPersonServer interface {
	Send(*PersonResponse) error
	grpc.ServerStream
}

type personRouteListPersonServer struct {
	grpc.ServerStream
}

func (x *personRouteListPersonServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonRoute_SavePerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonRouteServer).SavePerson(&personRouteSavePersonServer{stream})
}

type PersonRoute_SavePersonServer interface {
	SendAndClose(*PersonSaveSummary) error
	Recv() (*PersonRequest, error)
	grpc.ServerStream
}

type personRouteSavePersonServer struct {
	grpc.ServerStream
}

func (x *personRouteSavePersonServer) SendAndClose(m *PersonSaveSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personRouteSavePersonServer) Recv() (*PersonRequest, error) {
	m := new(PersonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonRoute_GetPersonChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonRouteServer).GetPersonChat(&personRouteGetPersonChatServer{stream})
}

type PersonRoute_GetPersonChatServer interface {
	Send(*PersonResponse) error
	Recv() (*PersonQuery, error)
	grpc.ServerStream
}

type personRouteGetPersonChatServer struct {
	grpc.ServerStream
}

func (x *personRouteGetPersonChatServer) Send(m *PersonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personRouteGetPersonChatServer) Recv() (*PersonQuery, error) {
	m := new(PersonQuery)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PersonRoute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PersonRoute",
	HandlerType: (*PersonRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _PersonRoute_GetPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPerson",
			Handler:       _PersonRoute_ListPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SavePerson",
			Handler:       _PersonRoute_SavePerson_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPersonChat",
			Handler:       _PersonRoute_GetPersonChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/person_service.proto",
}
